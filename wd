s#!/opt/local/bin/bash

set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob nocaseglob

# modern bash version check
! [ "${BASH_VERSINFO:-0}" -ge 4 ] && echo "This script requires bash v4 or later" && exit 1

# check for pup
if ! command -v pup &> /dev/null; then
  echo "pup is not installed. Please install pup."
  exit 1
fi

# check for jq
if ! command -v jq &> /dev/null; then
  echo "jq is not installed. Please install jq."
  exit 1
fi

# path to self and parent dir
SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

# kill all child proceses
kill_spawn() {
  for SPAWN in $(pgrep -g $$); do
    kill $SPAWN
  done
}
# kill_spawn on exit and ctrl-c
trap kill_spawn EXIT SIGINT

# Define global variables and set defaults
RENDERED_FILENAME=hud-$(date "+%y%m%d-%H%M").jpg
echo "starting generation of $RENDERED_FILENAME"
SCRAPE=1
DOWNLOAD=1
CROP=1
RENDER=1
DESKTOP=1
FLUSH=1
WX_WARN=1

# print out usage
usage() {
  cat <<EOF
USAGE: wd

Running wd without options will collect all assets,
render and set the desktop image to the output.

Individual options provided for debugging specific functions.

OPTIONS:
   -s    Scrape Sites
   -d    Download Images
   -c    Crop Images
   -r    Render Image
   -p    Set Desktop
   -f    Flush assets
   -h    Help
EOF
  exit 0
}

# process options and arguments
while getopts "hsdcrpf" OPTION; do
  case $OPTION in
  h) usage ;;
  s) SCRAPE=0 ;;
  d) DOWNLOAD=0 ;;
  c) CROP=0 ;;
  r) RENDER=0 ;;
  p) DESKTOP=0 ;;
  f) FLUSH=0 ;;
  esac
done

# ugly set the default action with no arguments are passed
if [[ $SCRAPE == 1 ]] && [[ $DOWNLOAD == 1 ]] && [[ $CROP == 1 ]] && [[ $RENDER == 1 ]] && [[ $DESKTOP == 1 ]] && [[ $FLUSH == 1 ]]; then
  SCRAPE=0 DOWNLOAD=0 CROP=0 RENDER=0 DESKTOP=0 FLUSH=0
fi

# path to this sripts repo root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
echo $SCRIPT_DIR

# flush assets
if [[ $FLUSH == 0 ]] && CLEANUP_FILES=$(compgen -G "${SCRIPT_DIR}/assets/*"); then
  for CLEANUP_FILE in $CLEANUP_FILES; do
    echo "removing $CLEANUP_FILE"
    rm $CLEANUP_FILE
  done
fi

# do the download
if [[ $DOWNLOAD == 0 ]]; then
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=60 -4 "https://cdn.star.nesdis.noaa.gov/GOES18/ABI/SECTOR/np/GEOCOLOR/latest.jpg" -O "$SCRIPT_DIR/assets/GOES18_north_pacific.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://images.wsdot.wa.gov/nc/002vc06430.jpg" -O "$SCRIPT_DIR/assets/wsdot_stevens_pass.jpg" 
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://images.wsdot.wa.gov/nw/002vc04558.jpg" -O "$SCRIPT_DIR/assets/wsdot_us2_skykomish.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://images.wsdot.wa.gov/nc/002vc06458.jpg" -O "$SCRIPT_DIR/assets/wsdot_e_stevens_summit.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://images.wsdot.wa.gov/nc/002vc06300.jpg" -O "$SCRIPT_DIR/assets/wsdot_big_windy.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://images.wsdot.wa.gov/nc/002vc06190.jpg" -O "$SCRIPT_DIR/assets/wsdot_w_stevens.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://live8p.brownrice.com/cam-images/stevenspasscourtyard.jpg" -O "$SCRIPT_DIR/assets/stevenspasscourtyard.jpg" &
#  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://cache.snow.com/mtncams/Skyline.jpg" -O "$SCRIPT_DIR/assets/stevens_skyline.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://live8p.brownrice.com/cam-images/stevenspasssnowstake.jpg" -O "$SCRIPT_DIR/assets/stevenspasssnowstake.jpg" &
#  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "http://cache.snow.com/mtncams/SPBaseArea.jpg" -O "$SCRIPT_DIR/assets/stevens_spbasearea.jpg" &
  wget --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 "https://live8p.brownrice.com/cam-images/stevenspassjupiter.jpg" -O "$SCRIPT_DIR/assets/stevenspassjupiter.jpg" &
fi

# wait for downloads to complete, useful for debugging
# wait

# setup python venv and run shot scraper
if [[ $SCRAPE == 0 ]]; then
  if ! command -v shot-scraper &> /dev/null; then
    echo "shot-scraper is not installed. Please pip install shot-scraper"
    echo "then: shot-scraper install -b webkit"
    exit 1
  elif ! command -v playwright &> /dev/null; then
    echo "playwright is not installed. Please  pip install playwright"
    exit 1
  else
    echo "scraping sites..."
    # need to add error handling for shot-scraper so that if it fails to grab image a transparent png is used
    echo "scraping weather_gov_hourly_forecast.png"
    if ! shot-scraper -b webkit 'https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892&unit=0&lg=english&FcstType=graphical' -o "${SCRIPTPATH}/assets/weather_gov_hourly_forecast.png" --selector 'body > main > div > table:nth-child(3) > tbody > tr:nth-child(5) > td > table:nth-child(1) > tbody > tr:nth-child(1) > td > a > img';then
      echo "weather_gov_hourly_forecast.png failed"
      convert -size 1x1 xc:none "${SCRIPTPATH}/assets/weather_gov_hourly_forecast.png"
    fi
    echo "scraping weather_gov_extended_forecast.png"
    if ! shot-scraper -b webkit 'https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892' -o "${SCRIPTPATH}/assets/weather_gov_extended_forecast.png" --selector '#seven-day-forecast';then
      echo "weather_gov_extended_forecast.png failed"
      convert -size 1x1 xc:none "${SCRIPTPATH}/assets/weather_gov_extended_forecast.png"
    fi
    echo "scraping nwac"
    if ! shot-scraper -b webkit 'https://nwac.us/data-portal/graph/21/' -o "${SCRIPTPATH}/assets/nwac_stevens_observations.png" --selector '#post-146 > div' --wait 5000;then
      echo "nwac_stevens_observations.png failed"
      convert -size 1x1 xc:none "${SCRIPTPATH}/assets/nwac_stevens_observations.png"
    fi
    echo "scraping nwac avalanche forcast"
    if ! shot-scraper -b webkit 'https://nwac.us/avalanche-forecast/#/stevens-pass' -o "${SCRIPTPATH}/assets/nwac_stevens_avalanche_forcast.png" --selector '#nac-forecast-container > div > div.nac-card.nac-content-panel.nac-content-panel-tab > div > div.pswipe-gallery > div > div.nac-danger.nac-mb-4' --wait 1000;then
      echo "nwac_stevens_avalanche_forcast.png failed"
      convert -size 1x1 xc:none "${SCRIPTPATH}/assets/nwac_stevens_avalanche_forcast.png"
    fi
    echo "scraping nwac avalanche forcast map"
    if ! shot-scraper -b webkit 'https://nwac.us' -o "${SCRIPTPATH}/assets/nwac_avalanche_forcast.png" --selector '#danger-map-widget' --wait 1000;then
      echo "nwac_avalanche_forcast.png failed"
      convert -size 1x1 xc:none "${SCRIPTPATH}/assets/nwac_avalanche_forcast.png"
    fi

    # source url
    SOURCE_URL="https://wsdot.com/travel/real-time/mountainpasses/stevens"

    # selector path
    SELECTOR_PATH='#index > div:nth-child(7) > div.full-width.column-container.mountain-pass > div.column-1'

    HTML_TEMP_FILE="${SCRIPTPATH}/assets/wsdot_stevens_pass.html"

    ## save selected html to file
    shot-scraper html $SOURCE_URL -o "$HTML_TEMP_FILE" --selector "$SELECTOR_PATH" --wait 1000

    # HTML_TEMP_FILE="${SCRIPTPATH}/testfiles/closed_wsdot_stevens_pass.html"
    # HTML_TEMP_FILE="${SCRIPTPATH}/testfiles/avalanche_wsdot_stevens_pass.html"

    # use pup to extract the conditions
    PASS_STATUS_EAST=$(cat $HTML_TEMP_FILE | pup 'body > div > div:nth-child(4) > div.conditionValue' text{})
    PASS_STATUS_WEST=$(cat $HTML_TEMP_FILE | pup 'body > div > div:nth-child(5) > div.conditionValue' text{})
    PASS_STATUS="Open"

    # if path status contains "Closed" then echo "Closed"
    if [[ $PASS_STATUS_EAST == *"Closed"* ]]; then
      PASS_STATUS="Closed"
      echo "East Closed"
    else
      echo "East Open"
    fi

    # if path status contains "Closed" then echo "Closed"
    if [[ $PASS_STATUS_WEST == *"Closed"* ]]; then
      PASS_STATUS="Closed"
      echo "West Closed"
    else
      echo "West Open"
    fi

    # if the pass is close render the conditions
    if [[ $PASS_STATUS == *"Closed"* ]]; then
      PASS_CONDITIONS=$(cat $HTML_TEMP_FILE | pup 'body > div > div:nth-child(6) > div.conditionValue' text{} | sed 's/ \{2,\}/ /g' | tr -d '\n')
      convert -size 250x200 -background white -fill black -pointsize 14 -gravity center -border 5 -bordercolor white caption:"$PASS_CONDITIONS" "${SCRIPTPATH}/assets/pass_conditions.png"
    else
      convert -size 250x200 xc:none "${SCRIPTPATH}/assets/pass_conditions.png"
    fi
  fi
fi

# wait for asset collection to complete
if [[ $DOWNLOAD == 0 ]] || [[ $SCRAPE == 0 ]]; then
  wait
  echo "Asset Collection Completed..."
fi

# crop and resize
if [[ $CROP == 0 ]]; then
  echo "croping images..."
  convert "$SCRIPT_DIR/assets/GOES18_north_pacific.jpg" -crop 7200x4050+0+0 -resize "3840>" "$SCRIPT_DIR/assets/background_s.jpg" &
  convert "$SCRIPT_DIR/assets/nwac_avalanche_forcast.png" -crop 400x520+65+110 -resize "100%" "$SCRIPT_DIR/assets/nwac_avalanche_forcast_s.jpg" &
  convert "$SCRIPT_DIR/assets/nwac_stevens_avalanche_forcast.png" -crop 1086x380+0+25 -resize "100%" "$SCRIPT_DIR/assets/nwac_stevens_avalanche_forcast_s.jpg" &
  convert "$SCRIPT_DIR/assets/nwac_stevens_observations.png" -crop 1140x1439+0+0 -resize "75%" "$SCRIPT_DIR/assets/nwac_stevens_observations_s.jpg" &
#  convert "$SCRIPT_DIR/assets/weather_gov_hourly_forecast.png" -crop 806x930+0+200 -resize "100%" "$SCRIPT_DIR/assets/weather_gov_hourly_forecast_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevenspasscourtyard.jpg" -crop 1920x1080+0+0 -resize "50%" "$SCRIPT_DIR/assets/stevenspasscourtyard_s.jpg" &
#  convert "$SCRIPT_DIR/assets/stevens_skyline.jpg" -crop 1920x1080+0+0 -resize "45%" "$SCRIPT_DIR/assets/stevens_skyline_s.jpg" &
#  convert "$SCRIPT_DIR/assets/stevenspassjupiter.jpg" -crop 3840x2160+0+0 -resize "40%" "$SCRIPT_DIR/assets/stevenspassjupiter_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevenspasssnowstake.jpg" -crop 1920x1080+0+0 -resize "50%" "$SCRIPT_DIR/assets/stevenspasssnowstake_s.jpg" &
#  convert "$SCRIPT_DIR/assets/stevens_spbasearea.jpg" -crop 1920x1080+0+0 -resize "45%" "$SCRIPT_DIR/assets/stevens_spbasearea_s.jpg" &
  convert "$SCRIPT_DIR/assets/weather_gov_extended_forecast.png" -crop 1146x300+0+100 -resize "100%" "$SCRIPT_DIR/assets/weather_gov_extended_forecast_s.jpg" &
  convert "$SCRIPT_DIR/assets/wsdot_stevens_pass.jpg" -resize "119%" "$SCRIPT_DIR/assets/wsdot_stevens_pass_b.jpg" &
  wait
  echo "Croping completed..."
fi

# composit the image
#    "$SCRIPT_DIR/assets/nwac_stevens_avalanche_forcast_s.jpg" -geometry +2730+20 -composite \

if [[ $RENDER == 0 ]]; then
  echo "Rendering..."
  convert -size 3840x2160 xc:skyblue \
    "$SCRIPT_DIR/assets/background_s.jpg" -geometry +0+0 -composite \
    "$SCRIPT_DIR/assets/weather_gov_hourly_forecast.png" -geometry +20+1130 -composite \
    "$SCRIPT_DIR/assets/weather_gov_extended_forecast_s.jpg" -geometry +2680+1860 -composite \
    "$SCRIPT_DIR/assets/nwac_avalanche_forcast_s.jpg" -geometry +3420+420 -composite \
    "$SCRIPT_DIR/assets/nwac_stevens_observations_s.jpg" -geometry +20+20 -composite \
    "$SCRIPT_DIR/assets/wsdot_us2_skykomish.jpg" -geometry +900+20 -composite \
    "$SCRIPT_DIR/assets/wsdot_w_stevens.jpg" -geometry +1250+20 -composite \
    "$SCRIPT_DIR/assets/wsdot_big_windy.jpg" -geometry +1600+20 -composite \
    "$SCRIPT_DIR/assets/wsdot_stevens_pass_b.jpg" -geometry +1950+20 -composite \
    "$SCRIPT_DIR/assets/wsdot_e_stevens_summit.jpg" -geometry +2360+20 -composite \
    "$SCRIPT_DIR/assets/stevenspassjupiter.jpg" -geometry +900+285 -composite \
    "$SCRIPT_DIR/assets/stevenspasssnowstake_s.jpg" -geometry +910+1730 -composite \
    "$SCRIPT_DIR/assets/stevenspasscourtyard_s.jpg" -geometry +1600+1730 -composite \
    "$SCRIPT_DIR/assets/pass_conditions.png" -geometry +3150+420 -composite \
    "$SCRIPT_DIR/rendered/$RENDERED_FILENAME"
  echo "Rendering "$SCRIPT_DIR/rendered/$RENDERED_FILENAME" Completed..."
fi

# set the desktop pattern
if [[ $DESKTOP == 0 ]]; then
  if [[ -f "$SCRIPT_DIR/rendered/$RENDERED_FILENAME" ]]; then
    echo "setting desktop to $SCRIPT_DIR/rendered/$RENDERED_FILENAME"
    desktoppr 0 "$SCRIPT_DIR/rendered/$RENDERED_FILENAME"
    find "${TMPDIR}../C/com.apple.wallpaper.caches/extension-com.apple.wallpaper.extension.image" -name "*.png" -type f -delete
  else
    echo "Rendered file $SCRIPT_DIR/rendered/$RENDERED_FILENAME not found..."
    echo "Run with render and set desktop at the same time"
  fi
fi

# save current image to cdn for web access
if [[ -d /Volumes/Bomb20/cdn ]]; then
  echo "copying $SCRIPT_DIR/rendered/$RENDERED_FILENAME to /Volumes/Bomb20/cdn"
  cp "$SCRIPT_DIR/rendered/$RENDERED_FILENAME" /Volumes/Bomb20/cdn/stevens_pass.jpg
fi

echo "End of Line..."
exit 0
