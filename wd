#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob nocaseglob

# kill all child proceses
kill_spawn() {
  for SPAWN in $(pgrep -g $$); do
    kill $SPAWN
  done
}

# kill_spawn on exit and ctrl-c
trap kill_spawn EXIT SIGINT

# Define global variables and set defaults
CHROME="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
RENDERED_FILENAME=hud-$(date "+%y%m%d-%H%M").jpg
echo "starting generation of $RENDERED_FILENAME"
SCRAPE=1
DOWNLOAD=1
CROP=1
RENDER=1
DESKTOP=1
FLUSH=1
WX_WARN=1

# print out usage
usage() {
  cat <<EOF
USAGE: wd

Running wd without options will collect all assets,
render and set the desktop image to the output.

Individual options provided for debugging specific functions.

OPTIONS:
   -s    Scrape Sites
   -d    Download Images
   -c    Crop Images
   -r    Render Image
   -p    Set Desktop
   -f    Flush assets
   -h    Help
EOF
  exit 0
}

# process options and arguments
while getopts "hsdcrpf" OPTION; do
  case $OPTION in
  h) usage ;;
  s) SCRAPE=0 ;;
  d) DOWNLOAD=0 ;;
  c) CROP=0 ;;
  r) RENDER=0 ;;
  p) DESKTOP=0 ;;
  f) FLUSH=0 ;;
  esac
done

# ugly set the default action with no arguments are passed
if [[ $SCRAPE == 1 ]] && [[ $DOWNLOAD == 1 ]] && [[ $CROP == 1 ]] && [[ $RENDER == 1 ]] && [[ $DESKTOP == 1 ]] && [[ $FLUSH == 1 ]]; then
  SCRAPE=0 DOWNLOAD=0 CROP=0 RENDER=0 DESKTOP=0 FLUSH=0
fi

# path to this sripts repo root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
echo $SCRIPT_DIR

# flush assets
if [[ $FLUSH == 0 ]] && CLEANUP_FILES=$(compgen -G "${SCRIPT_DIR}/assets/*.jpg"); then
  for CLEANUP_FILE in $CLEANUP_FILES; do
    echo "removing $CLEANUP_FILE"
    rm $CLEANUP_FILE
  done
fi

# scrape function
scrape() {
  set +e
  OUTPUT_FILE="$1"
  WINDOW_SIZE="$2"
  TARGET_URL="$3"

  # create temp dir if it doesn't exist
  if ! [[ -d ${TMPDIR}wd ]]; then
    mkdir ${TMPDIR}wd
  fi

  # retry with counter
  RETRY_COUNTER=0
  until [ "$RETRY_COUNTER" -ge 5 ]; do
    echo "scraping $OUTPUT_FILE"
    timeout 15s "$CHROME" --headless --disable-gpu --run-all-compositor-stages-before-draw --virtual-time-budget=10000 --window-size=2000x5000*4 -disk-cache-dir=${TMPDIR}wd --user-data-dir=${TMPDIR}wd --crash-dumps-dir=${TMPDIR}wd --screenshot="$OUTPUT_FILE" --window-size="$WINDOW_SIZE" --force-device-scale-factor=1 "$TARGET_URL" && break
    RETRY_COUNTER=$((RETRY_COUNTER + 1))
  done
}

# do the scrape
if [[ $SCRAPE == 0 ]]; then
  scrape "$SCRIPT_DIR/assets/weather_gov_extended.jpg" "1400,1200" "https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892" &
  scrape "$SCRIPT_DIR/assets/nwac_stevens_weather.jpg" "900,1600" "https://nwac.us/data-portal/graph/21/" &
  scrape "$SCRIPT_DIR/assets/nwac_avalanch.jpg" "900,2800" "https://nwac.us/avalanche-forecast/#/stevens-pass" &
  scrape "$SCRIPT_DIR/assets/nwac_overview.jpg" "800,1200" "https://nwac.us/" &
  scrape "$SCRIPT_DIR/assets/weather_gov_extended.jpg" "1400,1200" "https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892" &
  scrape "$SCRIPT_DIR/assets/weather_gov_hourly.jpg" "1000,1800" "https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892&unit=0&lg=english&FcstType=graphical" &
fi

download() {
  set +e
  OUTPUT_FILE="$1"
  TARGET_URL="$2"
  # retry with counter
  RETRY_COUNTER=0
  until [ "$RETRY_COUNTER" -ge 5 ]; do
    echo "Downloading $OUTPUT_FILE"
    wget --no-check-certificate "$TARGET_URL" -O "$OUTPUT_FILE" && break
    sleep 5
    RETRY_COUNTER=$((RETRY_COUNTER + 1))
  done
}

# do the download
if [[ $DOWNLOAD == 0 ]]; then
  download "$SCRIPT_DIR/assets/wsdot_stevens_pass.jpg" "https://images.wsdot.wa.gov/nc/002vc06430.jpg" &
  download "$SCRIPT_DIR/assets/wsdot_us2_skykomish.jpg" "https://images.wsdot.wa.gov/nw/002vc04558.jpg" &
  download "$SCRIPT_DIR/assets/wsdot_mill_creek.jpg" "https://images.wsdot.wa.gov/nc/002vc07057.jpg" &
  download "$SCRIPT_DIR/assets/wsdot_e_stevens_summit.jpg" "https://images.wsdot.wa.gov/nc/002vc06458.jpg" &
  download "$SCRIPT_DIR/assets/wsdot_big_windy.jpg" "https://images.wsdot.wa.gov/nc/002vc06300.jpg" &
  download "$SCRIPT_DIR/assets/wsdot_w_stevens.jpg" "https://images.wsdot.wa.gov/nc/002vc06190.jpg" &
  download "$SCRIPT_DIR/assets/GOES17_north_pacific.jpg" "https://cdn.star.nesdis.noaa.gov/GOES17/ABI/SECTOR/np/GEOCOLOR/latest.jpg" &
  download "$SCRIPT_DIR/assets/stevens_cowboy_mountain.jpg" "http://common.snow.com/mtncams/Cowboy%20Mountain.jpg" &
#  download "$SCRIPT_DIR/assets/stevens_skyline.jpg" "http://common.snow.com/mtncams/Skyline.jpg" &
  download "$SCRIPT_DIR/assets/stevens_skyline.jpg" "https://cache.snow.com/mtncams/Skyline.jpg" &
  download "$SCRIPT_DIR/assets/stevens_glacier_peak.jpg" "http://cache.snow.com/mtncams/Glacier%20Peak.jpg" &
  download "$SCRIPT_DIR/assets/stevens_gemini.jpg" "http://cache.snow.com/mtncams/Gemini.jpg" &
  download "$SCRIPT_DIR/assets/stevens_south_divide.jpg" "http://cache.snow.com/mtncams/South%20Divide.jpg" &
  download "$SCRIPT_DIR/assets/stevens_spbasearea.jpg" "http://cache.snow.com/mtncams/SPBaseArea.jpg" &
fi

# wait for asset collection to complete
if [[ $DOWNLOAD == 0 ]] || [[ $SCRAPE == 0 ]]; then
  wait
  echo "Asset Collection Completed..."
fi

# crop and resize
if [[ $CROP == 0 ]]; then
  # adjust extended weather crop based on warnings in place
  ( TOP_CROP="1125"
    curl -s "https://forecast.weather.gov/MapClick.php?lat=47.7456&lon=-121.0892&unit=0&lg=english&FcstType=text&TextType=0" | grep 'class="warn"' > /dev/null 2>&1 && TOP_CROP=1400
  convert "$SCRIPT_DIR/assets/weather_gov_extended.jpg" -crop ${TOP_CROP}x240+140+539 -resize "100%" "$SCRIPT_DIR/assets/weather_gov_extended_s.jpg") & 
  convert "$SCRIPT_DIR/assets/GOES17_north_pacific.jpg" -crop 7200x4050+0+0 -resize "3840>" "$SCRIPT_DIR/assets/background_s.jpg" &
  convert "$SCRIPT_DIR/assets/nwac_stevens_weather.jpg" -crop 750x1100+80+220 -resize "100%" "$SCRIPT_DIR/assets/nwac_stevens_weather_s.jpg" & 
  convert "$SCRIPT_DIR/assets/nwac_avalanch.jpg" -crop 700x680+100+800 -resize "80%" "$SCRIPT_DIR/assets/nwac_avalanch_s.jpg" & ###
  convert "$SCRIPT_DIR/assets/weather_gov_hourly.jpg" -crop 830x890+85+405 -resize "100%" "$SCRIPT_DIR/assets/weather_gov_hourly_s.jpg" & 
  convert "$SCRIPT_DIR/assets/stevens_cowboy_mountain.jpg" -crop 1920x1080+0+0 -resize "50%" "$SCRIPT_DIR/assets/stevens_cowboy_mountain_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevens_skyline.jpg" -crop 1920x1080+0+0 -resize "30%" "$SCRIPT_DIR/assets/stevens_skyline_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevens_glacier_peak.jpg" -crop 1920x1080+0+0 -resize "30%" "$SCRIPT_DIR/assets/stevens_glacier_peak_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevens_gemini.jpg" -crop 1920x1080+0+0 -resize "30%" "$SCRIPT_DIR/assets/stevens_gemini_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevens_south_divide.jpg" -crop 1920x1080+0+0 -resize "50%" "$SCRIPT_DIR/assets/stevens_south_divide_s.jpg" &
  convert "$SCRIPT_DIR/assets/stevens_spbasearea.jpg" -crop 1920x1080+0+0 -resize "30%" "$SCRIPT_DIR/assets/stevens_spbasearea_s.jpg" &
  wait
  echo "Croping completed..."
fi

# composit the image
if [[ $RENDER == 0 ]]; then
  convert -size 3840x2160 xc:skyblue \
    "$SCRIPT_DIR/assets/background_s.jpg" -geometry +0+0 -composite \
    "$SCRIPT_DIR/assets/nwac_stevens_weather_s.jpg" -geometry +50+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_us2_skykomish.jpg" -geometry +825+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_w_stevens.jpg" -geometry +1175+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_big_windy.jpg" -geometry +1526+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_stevens_pass.jpg" -geometry +1875+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_e_stevens_summit.jpg" -geometry +2226+50 -composite \
    "$SCRIPT_DIR/assets/wsdot_mill_creek.jpg" -geometry +2586+50 -composite \
    "$SCRIPT_DIR/assets/stevens_cowboy_mountain_s.jpg" -geometry +910+900 -composite \
    "$SCRIPT_DIR/assets/stevens_skyline_s.jpg" -geometry +1504+1780 -composite \
    "$SCRIPT_DIR/assets/stevens_glacier_peak_s.jpg" -geometry +2115+1780 -composite \
    "$SCRIPT_DIR/assets/stevens_gemini_s.jpg" -geometry +2725+1780 -composite \
    "$SCRIPT_DIR/assets/stevens_south_divide_s.jpg" -geometry +840+330 -composite \
    "$SCRIPT_DIR/assets/stevens_spbasearea_s.jpg" -geometry +910+1780 -composite \
    "$SCRIPT_DIR/assets/nwac_avalanch_s.jpg" -geometry +3000+50 -composite \
    "$SCRIPT_DIR/assets/weather_gov_hourly_s.jpg" -geometry +50+1230 -composite \
    "$SCRIPT_DIR/assets/weather_gov_extended_s.jpg" -geometry +920+1476 -composite \
    "$SCRIPT_DIR/rendered/$RENDERED_FILENAME"
  echo "Rendering Completed..."
fi

# set the desktop pattern
if [[ $DESKTOP == 0 ]]; then
  if [[ -f "$SCRIPT_DIR/rendered/$RENDERED_FILENAME" ]]; then
    echo "setting desktop to $SCRIPT_DIR/rendered/$RENDERED_FILENAME"
    desktoppr 0 "$SCRIPT_DIR/rendered/$RENDERED_FILENAME"
  else
    echo "Rendered file $SCRIPT_DIR/rendered/$RENDERED_FILENAME not found..."
    echo "Run with render and set desktop at the same time"
  fi
fi

echo "End of Line..."
exit 0
